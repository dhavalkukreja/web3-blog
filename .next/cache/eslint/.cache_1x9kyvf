[{"C:\\Users\\asus\\Desktop\\Thapa React Tutorials\\18 june\\web3-blog\\pages\\api\\hello.js":"1","C:\\Users\\asus\\Desktop\\Thapa React Tutorials\\18 june\\web3-blog\\pages\\create-post.js":"2","C:\\Users\\asus\\Desktop\\Thapa React Tutorials\\18 june\\web3-blog\\pages\\edit-post\\[id].js":"3","C:\\Users\\asus\\Desktop\\Thapa React Tutorials\\18 june\\web3-blog\\pages\\index.js":"4","C:\\Users\\asus\\Desktop\\Thapa React Tutorials\\18 june\\web3-blog\\pages\\post\\[id].js":"5","C:\\Users\\asus\\Desktop\\Thapa React Tutorials\\18 june\\web3-blog\\pages\\_app.js":"6"},{"size":170,"mtime":1654646176085,"results":"7","hashOfConfig":"8"},{"size":5247,"mtime":1655527500811,"results":"9","hashOfConfig":"8"},{"size":4963,"mtime":1655527642795,"results":"10","hashOfConfig":"8"},{"size":4110,"mtime":1655527454967,"results":"11","hashOfConfig":"8"},{"size":3573,"mtime":1655527620361,"results":"12","hashOfConfig":"8"},{"size":5881,"mtime":1655527434349,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11bzsz3",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},"C:\\Users\\asus\\Desktop\\Thapa React Tutorials\\18 june\\web3-blog\\pages\\api\\hello.js",[],[],"C:\\Users\\asus\\Desktop\\Thapa React Tutorials\\18 june\\web3-blog\\pages\\create-post.js",["37","38"],[],"import { useState, useRef, useEffect } from 'react' // allows us to create a reference to different items that we are going to work around default APIs\r\nimport { useRouter } from 'next/router'\r\nimport dynamic from 'next/dynamic' //simple markdown editor does not work on the server, it only works on the client, so it allows us to dynamically import\r\nimport { css } from '@emotion/css'\r\nimport { ethers } from 'ethers'\r\nimport { create } from 'ipfs-http-client'\r\n\r\n/* import contract address and contract owner address */\r\nimport {\r\n  contractAddress\r\n} from '../config'\r\n\r\nimport Blog from '../artifacts/contracts/Blog.sol/Blog.json'\r\n\r\n/* define the ipfs endpoint */\r\nconst client = create('https://ipfs.infura.io:5001/api/v0')\r\n\r\n/* configure the markdown editor to be client-side import */\r\nconst SimpleMDE = dynamic(\r\n  () => import('react-simplemde-editor'),\r\n  { ssr: false } //it will allow us to use simple markdown editor in nextjs which by default doesnot work\r\n)\r\n\r\nconst initialState = { title: '', content: '' }\r\n\r\nfunction CreatePost() {\r\n  /* configure initial state to be used in the component */\r\n  const [post, setPost] = useState(initialState)\r\n  const [image, setImage] = useState(null)\r\n  const [loaded, setLoaded] = useState(false) //simple markdown editor is initially disabled and enabled after 500ms\r\n\r\n  const fileRef = useRef(null)\r\n  const { title, content } = post //destructuring\r\n  const router = useRouter()\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      /* delay rendering buttons until dynamic import is complete */\r\n      setLoaded(true)\r\n    }, 500)\r\n  }, [])\r\n\r\n  function onChange(e) { // onchange handler, aloow us to update the post and setpost content\r\n    setPost(() => ({ ...post, [e.target.name]: e.target.value }))\r\n  }\r\n\r\n  async function createNewPost() {   \r\n    /* saves post to ipfs then anchors to smart contract */\r\n    if (!title || !content) return\r\n    const hash = await savePostToIpfs()\r\n    await savePost(hash)\r\n    router.push(`/`) //return to the home screen\r\n  }\r\n\r\n  async function savePostToIpfs() {\r\n    /* save post metadata to ipfs */\r\n    try {\r\n      const added = await client.add(JSON.stringify(post))\r\n      return added.path\r\n    } catch (err) {\r\n      console.log('error: ', err)\r\n    }\r\n  }\r\n\r\n  async function savePost(hash) {\r\n    /* anchor post to smart contract */\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\r\n      const signer = provider.getSigner()\r\n      const contract = new ethers.Contract(contractAddress, Blog.abi, signer)\r\n      console.log('contract: ', contract)\r\n      try {\r\n        const val = await contract.createPost(post.title, hash)\r\n        /* optional - wait for transaction to be confirmed before rerouting */\r\n        await provider.waitForTransaction(val.hash)\r\n        console.log('val: ', val)\r\n      } catch (err) {\r\n        console.log('Error: ', err)\r\n      }\r\n    }    \r\n  }\r\n\r\n  function triggerOnChange() {\r\n    /* trigger handleFileChange handler of hidden file input */\r\n    fileRef.current.click()\r\n  }\r\n\r\n  async function handleFileChange (e) {\r\n    /* upload cover image to ipfs and save hash to state */\r\n    const uploadedFile = e.target.files[0]\r\n    if (!uploadedFile) return\r\n    const added = await client.add(uploadedFile)\r\n    setPost(state => ({ ...state, coverImage: added.path }))\r\n    setImage(uploadedFile)\r\n  }\r\n// now creating UI\r\n  return (\r\n    <div className={container}>\r\n      {\r\n        image && (\r\n          <img className={coverImageStyle} src={URL.createObjectURL(image)} />\r\n        )\r\n      }\r\n      <input\r\n        onChange={onChange}\r\n        name='title'\r\n        placeholder='Give it a title ...'\r\n        value={post.title}\r\n        className={titleStyle}\r\n      />\r\n      <SimpleMDE\r\n        className={mdEditor}\r\n        placeholder=\"What's on your mind?\"\r\n        value={post.content}\r\n        onChange={value => setPost({ ...post, content: value })}\r\n      />\r\n      {\r\n        loaded && (\r\n          <>\r\n            <button\r\n              className={button}\r\n              type='button'\r\n              onClick={createNewPost}\r\n            >Publish</button>\r\n            <button\r\n              onClick={triggerOnChange}\r\n              className={button}\r\n            >Add cover image</button>\r\n          </>\r\n        )\r\n      }\r\n      <input\r\n        id='selectImage'\r\n        className={hiddenInput} \r\n        type='file'\r\n        onChange={handleFileChange}\r\n        ref={fileRef}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst hiddenInput = css`\r\n  display: none;\r\n`\r\n\r\nconst coverImageStyle = css`\r\n  max-width: 800px;\r\n`\r\n\r\nconst mdEditor = css`\r\n  margin-top: 40px;\r\n`\r\n\r\nconst titleStyle = css`\r\n  margin-top: 40px;\r\n  border: none;\r\n  outline: none;\r\n  background-color: inherit;\r\n  font-size: 44px;\r\n  font-weight: 600;\r\n  &::placeholder {\r\n    color: #999999;\r\n  }\r\n`\r\n\r\nconst container = css`\r\n  width: 800px;\r\n  margin: 0 auto;\r\n`\r\n\r\nconst button = css`\r\n  background-color: #fafafa;\r\n  outline: none;\r\n  border: none;\r\n  border-radius: 15px;\r\n  cursor: pointer;\r\n  margin-right: 10px;\r\n  font-size: 18px;\r\n  padding: 16px 70px;\r\n  box-shadow: 7px 7px rgba(0, 0, 0, .1);\r\n`\r\n\r\nexport default CreatePost","C:\\Users\\asus\\Desktop\\Thapa React Tutorials\\18 june\\web3-blog\\pages\\edit-post\\[id].js",["39","40","41"],[],"import { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport ReactMarkdown from 'react-markdown'\r\nimport { css } from '@emotion/css'\r\nimport dynamic from 'next/dynamic'\r\nimport { ethers } from 'ethers'\r\nimport { create } from 'ipfs-http-client'\r\n\r\nimport {\r\n  contractAddress\r\n} from '../../config'\r\nimport Blog from '../../artifacts/contracts/Blog.sol/Blog.json'\r\n\r\nconst ipfsURI = 'https://ipfs.io/ipfs/'\r\nconst client = create('https://ipfs.infura.io:5001/api/v0')\r\n\r\nconst SimpleMDE = dynamic(\r\n  () => import('react-simplemde-editor'),\r\n  { ssr: false }\r\n)\r\n\r\nexport default function Post() {\r\n  const [post, setPost] = useState(null)\r\n  const [editing, setEditing] = useState(true)\r\n  const router = useRouter()\r\n  const { id } = router.query\r\n\r\n  useEffect(() => {\r\n    fetchPost()\r\n  }, [id])\r\n  async function fetchPost() {\r\n    /* we first fetch the individual post by ipfs hash from the network */\r\n    if (!id) return\r\n    let provider\r\n    if (process.env.NEXT_PUBLIC_ENVIRONMENT === 'local') {\r\n      provider = new ethers.providers.JsonRpcProvider()\r\n    } else if (process.env.NEXT_PUBLIC_ENVIRONMENT === 'testnet') {\r\n      provider = new ethers.providers.JsonRpcProvider('https://polygon-mumbai.infura.io/v3/b782f651fe5442088319190ab7f55d2b')\r\n    } else {\r\n      provider = new ethers.providers.JsonRpcProvider('https://polygon-rpc.com/')\r\n    }\r\n    const contract = new ethers.Contract(contractAddress, Blog.abi, provider)\r\n    const val = await contract.fetchPost(id)\r\n    const postId = val[0].toNumber()\r\n\r\n    /* next we fetch the IPFS metadata from the network */\r\n    const ipfsUrl = `${ipfsURI}/${id}`\r\n    const response = await fetch(ipfsUrl)\r\n    const data = await response.json()\r\n    if(data.coverImage) {\r\n      let coverImagePath = `${ipfsURI}/${data.coverImage}`\r\n      data.coverImagePath = coverImagePath\r\n    }\r\n    /* finally we append the post ID to the post data */\r\n    /* we need this ID to make updates to the post */\r\n    data.id = postId;\r\n    setPost(data)\r\n  }\r\n\r\n  async function savePostToIpfs() {\r\n    try {\r\n      const added = await client.add(JSON.stringify(post))\r\n      return added.path\r\n    } catch (err) {\r\n      console.log('error: ', err)\r\n    }\r\n  }\r\n\r\n  async function updatePost() {\r\n    const hash = await savePostToIpfs()\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum)\r\n    const signer = provider.getSigner()\r\n    const contract = new ethers.Contract(contractAddress, Blog.abi, signer)\r\n    await contract.updatePost(post.id, post.title, hash, true) //we are allowing to update the post\r\n    router.push('/')\r\n  }\r\n\r\n  if (!post) return null\r\n\r\n  return (\r\n    <div className={container}>\r\n      {\r\n      /* editing state will allow the user to toggle between */\r\n      /*  a markdown editor and a markdown renderer */\r\n      }\r\n      {\r\n        editing && (\r\n          <div>\r\n            <input\r\n              onChange={e => setPost({ ...post, title: e.target.value })}\r\n              name='title'\r\n              placeholder='Give it a title ...'\r\n              value={post.title}\r\n              className={titleStyle}\r\n            />\r\n            <SimpleMDE\r\n              className={mdEditor}\r\n              placeholder=\"What's on your mind?\"\r\n              value={post.content}\r\n              onChange={value => setPost({ ...post, content: value })}\r\n            />\r\n            <button className={button} onClick={updatePost}>Update post</button>\r\n          </div>\r\n        )\r\n      }\r\n      {\r\n        !editing && (\r\n          <div>\r\n            {\r\n              post.coverImagePath && (\r\n                <img\r\n                  src={post.coverImagePath}\r\n                  className={coverImageStyle}\r\n                />\r\n              )\r\n            }\r\n            <h1>{post.title}</h1>\r\n            <div className={contentContainer}>\r\n              <ReactMarkdown>{post.content}</ReactMarkdown>\r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n      <button className={button} onClick={() => setEditing(editing ? false : true)}>{ editing ? 'View post' : 'Edit post'}</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst button = css`\r\n  background-color: #fafafa;\r\n  outline: none;\r\n  border: none;\r\n  border-radius: 15px;\r\n  cursor: pointer;\r\n  margin-right: 10px;\r\n  margin-top: 15px;\r\n  font-size: 18px;\r\n  padding: 16px 70px;\r\n  box-shadow: 7px 7px rgba(0, 0, 0, .1);\r\n`\r\n\r\nconst titleStyle = css`\r\n  margin-top: 40px;\r\n  border: none;\r\n  outline: none;\r\n  background-color: inherit;\r\n  font-size: 44px;\r\n  font-weight: 600;\r\n  &::placeholder {\r\n    color: #999999;\r\n  }\r\n`\r\n\r\nconst mdEditor = css`\r\n  margin-top: 40px;\r\n`\r\n\r\nconst coverImageStyle = css`\r\n  width: 900px;\r\n`\r\n\r\nconst container = css`\r\n  width: 900px;\r\n  margin: 0 auto;\r\n`\r\n\r\nconst contentContainer = css`\r\n  margin-top: 60px;\r\n  padding: 0px 40px;\r\n  border-left: 1px solid #e7e7e7;\r\n  border-right: 1px solid #e7e7e7;\r\n  & img {\r\n    max-width: 900px;\r\n  }\r\n`","C:\\Users\\asus\\Desktop\\Thapa React Tutorials\\18 june\\web3-blog\\pages\\index.js",["42","43"],[],"// This page will fetch the list of posts from the network and render the post titles in a listview. When the user clicks on a post, we will navigate them to another page for a detail view (page will be created next).\n\nimport { css } from '@emotion/css'\nimport { useContext } from 'react' // a helper that allows us to extract the context that was set from the actual previous component\n\nimport { useRouter } from 'next/router' // api from nextjs that allows us to stuff with routing programatically\nimport { ethers } from 'ethers'\nimport Link from 'next/link'\nimport { AccountContext } from '../context'\n\n\n/* import contract address and contract owner address */\nimport {\n  contractAddress, ownerAddress\n} from '../config'\n\n\n/* import Application Binary Interface (ABI) for ethers library to work*/\nimport Blog from '../artifacts/contracts/Blog.sol/Blog.json' // contract interface for us to talk to the network\n\nexport default function Home(props) {\n  /* posts are fetched server side and passed in as props */\n  /* see getServerSideProps */\n  const { posts } = props //destructuring\n  const account = useContext(AccountContext)\n\n  const router = useRouter()\n  async function navigate() {\n    router.push('/create-post')\n  }\n\n  return (\n    <div>\n      <div className={postList}>\n        {\n          /* map over the posts array and render a button with the post title */\n          posts.map((post, index) => (\n            <Link href={`/post/${post[2]}`} key={index}>\n              <a>\n                <div className={linkStyle}>\n                  <p className={postTitle}>{post[1]}</p>\n                  <div className={arrowContainer}>\n                  <img\n                      src='/right-arrow.svg'\n                      alt='Right arrow'\n                      className={smallArrow}\n                    />\n                  </div>\n                </div>\n              </a>\n            </Link>\n          ))\n        }\n      </div>\n      <div className={container}>\n        {\n          (account === ownerAddress) && posts && !posts.length && (\n            /* if the signed in user is the account owner, render a button */\n            /* to create the first post */\n            <button className={buttonStyle} onClick={navigate}>\n              Create your first post\n              <img\n                src='/right-arrow.svg'\n                alt='Right arrow'\n                className={arrow}\n              />\n            </button>\n          )\n        }\n      </div>\n    </div>\n  )\n}\n\nexport async function getServerSideProps() {\n  /* here we check to see the current environment variable */\n  /* and render a provider based on the environment we're in */\n  let provider\n  if (process.env.ENVIRONMENT === 'local') {\n    provider = new ethers.providers.JsonRpcProvider()\n  } else if (process.env.ENVIRONMENT === 'testnet') {\n    provider = new ethers.providers.JsonRpcProvider('https://polygon-mumbai.infura.io/v3/b782f651fe5442088319190ab7f55d2b')\n  } else {\n    provider = new ethers.providers.JsonRpcProvider('https://polygon-rpc.com/')\n  }\n\n  const contract = new ethers.Contract(contractAddress, Blog.abi, provider)\n  const data = await contract.fetchPosts() // it will return the array of posts\n  return {\n    props: {\n      posts: JSON.parse(JSON.stringify(data))\n    }\n  }\n}\n\nconst arrowContainer = css`\n  display: flex;\n  flex: 1;\n  justify-content: flex-end;\n  padding-right: 20px;\n`\n\nconst postTitle = css`\n  font-size: 30px;\n  font-weight: bold;\n  cursor: pointer;\n  margin: 0;\n  padding: 20px;\n`\n\nconst linkStyle = css`\n  border: 1px solid #ddd;\n  margin-top: 20px;\n  border-radius: 8px;\n  display: flex;\n`\n\nconst postList = css`\n  width: 700px;\n  margin: 0 auto;\n  padding-top: 50px;  \n`\n\nconst container = css`\n  display: flex;\n  justify-content: center;\n`\n\nconst buttonStyle = css`\n  margin-top: 100px;\n  background-color: #fafafa;\n  outline: none;\n  border: none;\n  font-size: 44px;\n  padding: 20px 70px;\n  border-radius: 15px;\n  cursor: pointer;\n  box-shadow: 7px 7px rgba(0, 0, 0, .1);\n`\n\nconst arrow = css`\n  width: 35px;\n  margin-left: 30px;\n`\n\nconst smallArrow = css`\n  width: 25px;\n`","C:\\Users\\asus\\Desktop\\Thapa React Tutorials\\18 june\\web3-blog\\pages\\post\\[id].js",["44","45"],[],"import ReactMarkdown from 'react-markdown' // this is our markdown renderer\r\nimport { useContext } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport Link from 'next/link'\r\nimport { css } from '@emotion/css'\r\nimport { ethers } from 'ethers'\r\nimport { AccountContext } from '../../context'\r\n\r\n/* import contract and owner addresses */\r\nimport {\r\n  contractAddress, ownerAddress\r\n} from '../../config'\r\nimport Blog from '../../artifacts/contracts/Blog.sol/Blog.json'\r\n\r\nconst ipfsURI = 'https://ipfs.io/ipfs/'\r\n\r\n//very similar to index.js page\r\n\r\nexport default function Post({ post }) {\r\n  const account = useContext(AccountContext)\r\n  const router = useRouter()\r\n  const { id } = router.query\r\n\r\n  if (router.isFallback) {\r\n    return <div>Loading...</div>\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {\r\n        post && (\r\n          <div className={container}>\r\n            {\r\n              /* if the owner is the user, render an edit button */\r\n              ownerAddress === account && (\r\n                <div className={editPost}>\r\n                  <Link href={`/edit-post/${id}`}>\r\n                    <a>\r\n                      Edit post\r\n                    </a>\r\n                  </Link>\r\n                </div>\r\n              )\r\n            }\r\n            {\r\n              /* if the post has a cover image, render it */\r\n              post.coverImage && (\r\n                <img\r\n                  src={post.coverImage}\r\n                  className={coverImageStyle}\r\n                />\r\n              )\r\n            }\r\n            <h1>{post.title}</h1>\r\n            <div className={contentContainer}>\r\n              <ReactMarkdown>{post.content}</ReactMarkdown>\r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n  /* here we fetch the posts from the network */\r\n  let provider\r\n  if (process.env.ENVIRONMENT === 'local') {\r\n    provider = new ethers.providers.JsonRpcProvider()\r\n  } else if (process.env.ENVIRONMENT === 'testnet') {\r\n    provider = new ethers.providers.JsonRpcProvider('https://polygon-mumbai.infura.io/v3/b782f651fe5442088319190ab7f55d2b')\r\n  } else {\r\n    provider = new ethers.providers.JsonRpcProvider('https://polygon-rpc.com/')\r\n  }\r\n\r\n  const contract = new ethers.Contract(contractAddress, Blog.abi, provider)\r\n  const data = await contract.fetchPosts()\r\n\r\n  /* then we map over the posts and create a params object passing */\r\n  /* the id property to getStaticProps which will run for ever post */\r\n  /* in the array and generate a new page */\r\n  const paths = data.map(d => ({ params: { id: d[2] } }))\r\n\r\n  return {\r\n    paths,\r\n    fallback: true\r\n  }\r\n}\r\n\r\nexport async function getStaticProps({ params }) {\r\n  /* using the id property passed in through the params object */\r\n  /* we can us it to fetch the data from IPFS and pass the */\r\n  /* post data into the page as props */\r\n  const { id } = params\r\n  const ipfsUrl = `${ipfsURI}/${id}`\r\n  const response = await fetch(ipfsUrl)\r\n  const data = await response.json()\r\n  if(data.coverImage) {\r\n    let coverImage = `${ipfsURI}/${data.coverImage}`\r\n    data.coverImage = coverImage\r\n  }\r\n\r\n  return {\r\n    props: {\r\n      post: data\r\n    },\r\n  }\r\n}\r\n\r\nconst editPost = css`\r\n  margin: 20px 0px;\r\n`\r\n\r\nconst coverImageStyle = css`\r\n  width: 900px;\r\n`\r\n\r\nconst container = css`\r\n  width: 900px;\r\n  margin: 0 auto;\r\n`\r\n\r\nconst contentContainer = css`\r\n  margin-top: 60px;\r\n  padding: 0px 40px;\r\n  border-left: 1px solid #e7e7e7;\r\n  border-right: 1px solid #e7e7e7;\r\n  & img {\r\n    max-width: 900px;\r\n  }\r\n`","C:\\Users\\asus\\Desktop\\Thapa React Tutorials\\18 june\\web3-blog\\pages\\_app.js",["46"],[],"// this is the entrypoint to our application. Here we will update the code to include components that will be rendered/displayed, global imports, navigation, wallet connection, context, and some basic styling. This page serves as a wrapper or layout for the rest of the app\n\nimport '../styles/globals.css'\nimport { useState } from 'react' // form managing local state\nimport Link from 'next/link' //create links b/w pages\nimport { css } from '@emotion/css' // css api from emotion\nimport { ethers } from 'ethers'\nimport Web3Modal from 'web3modal' // allow us to get the users wallet\nimport WalletConnectProvider from '@walletconnect/web3-provider' // allows to choose different wallets other than metamask\nimport { AccountContext } from '../context.js' //helps to manage and update the address of the sign in user and pass that info around the app\nimport { ownerAddress } from '../config' // importing the owner address\nimport 'easymde/dist/easymde.min.css'\n\nfunction MyApp({ Component, pageProps }) {\n  /* create local state to save account information after signin, by default, it is set to null */\n  const [account, setAccount] = useState(null)\n \n  /* web3Modal configuration for enabling wallet access, create a new instance of web3 modal and return it */\n  async function getWeb3Modal() {\n    const web3Modal = new Web3Modal({\n      //network: 'mainnet',\n      cacheProvider: false,\n      providerOptions: {\n        walletconnect: {\n          package: WalletConnectProvider,\n          options: { \n            //infuraId: process.env.NEXT_PUBLIC_INFURA_ID\n            infuraId: \"b782f651fe5442088319190ab7f55d2b\"\n          },\n        },\n      },\n    })\n    return web3Modal\n  }\n\n  /* the connect function calls web3 modal and get its instance to connect to the user's wallet */\n  async function connect() {\n    try {\n      const web3Modal = await getWeb3Modal()\n      const connection = await web3Modal.connect()\n      const provider = new ethers.providers.Web3Provider(connection) //create a provider using ethers.js\n      const accounts = await provider.listAccounts()\n      setAccount(accounts[0]) //get first item in the array of accounts which will be the sign in user. this will set the local state\n    } catch (err) {\n      console.log('error:', err)\n    }\n  }\n\n  //now we will return our UI\n  return (\n    <div>\n      <nav className={nav}>\n        <div className={header}>\n        {\n          /* header it is the svg */\n        }\n          <Link href=\"/\">\n            <a>\n              <img\n                src='/logo.svg'\n                alt=\"React Logo\"\n                style={{ width: '50px' }}\n              />\n            </a>\n          </Link>\n          <Link href=\"/\">\n            <a>\n              <div className={titleContainer}>\n                <h2 className={title}>Full Stack</h2>\n                <p className={description}>Web3 Blog</p>\n              </div>\n            </a>\n          </Link>\n          {\n          /*check if user is connected w/ metamask or not*/\n        }\n          {\n            !account && (\n              <div className={buttonContainer}>\n                <button className={buttonStyle} onClick={connect}><b>Connect</b></button>\n              </div>\n            )\n          }\n          {\n            account && <p className={accountInfo}>{account}</p>\n          }\n        </div>\n        <div className={linkContainer}>\n          <Link href=\"/\" >\n            <a className={link}>\n              Home\n            </a>\n          </Link>\n          {\n            /* if the signed in user is the contract owner, we */\n            /* show the nav link to create a new post */\n            (account === ownerAddress) && (\n              <Link href=\"/create-post\">\n                <a className={link}>\n                  Create Post\n                </a>\n              </Link>\n            )\n          }\n        </div>\n        <span className={creditsContainer}>\n          <Link href=\"https://twitter.com/0xDhaval\" >\n            <a className={link}>\n              Built by : <u>Dhaval Kukreja</u>\n            </a>\n          </Link>\n          <Link href=\"https://github.com/dhavalkukreja/web3-blog\" >\n            <a className={link}>\n              Click here for github link\n            </a>\n          </Link>\n        </span>\n      </nav>\n      {\n        /* Here we will be rendering our actual application. when value of account changes, the second line changes and so on */\n      }\n      <div className={container}>\n        <AccountContext.Provider value={account}>\n          <Component {...pageProps} connect={connect} />\n        </AccountContext.Provider>\n      </div>\n    </div>\n  )\n}\n\n\n// const my var = css `` hower effects are also available\n\nconst accountInfo = css`\n  width: 100%;\n  display: flex;\n  flex: 1;\n  justify-content: flex-end;\n  font-size: 12px;\n`\n\nconst container = css`\n  padding: 40px;\n`\n\nconst linkContainer = css`\n  padding: 30px 60px;\n  background-color: #fafafa;\n`\nconst creditsContainer = css`\n  padding: 20px 60px;\n  background-color: #ffff00;\n  font-family: \"Lucida Console\", \"Courier New\", monospace;\n`\n\nconst nav = css`\n  background-color: white;\n`\n\nconst header = css`\n  display: flex;\n  border-bottom: 1px solid rgba(0, 0, 0, .075);\n  padding: 20px 30px;\n`\n\nconst description = css`\n  margin: 0;\n  color: #999999;\n`\n\nconst titleContainer = css`\n  display: flex;\n  flex-direction: column;\n  padding-left: 15px;\n`\n\nconst title = css`\n  margin-left: 30px;\n  font-weight: 500;\n  margin: 0;\n`\n\nconst buttonContainer = css`\n  width: 100%;\n  display: flex;\n  flex: 1;\n  justify-content: flex-end;\n`\n\nconst buttonStyle = css`\n  background-color: #ffff00;\n  outline: none;\n  border: none;\n  font-size: 18px;\n  padding: 16px 70px;\n  border-radius: 15px;\n  cursor: pointer;\n  box-shadow: 7px 7px rgba(0, 0, 0, .1);\n`\n\nconst link = css`\n  margin: 0px 40px 0px 0px;\n  font-size: 16px;\n  font-weight: 400;\n`\n\nexport default MyApp",{"ruleId":"47","severity":1,"message":"48","line":101,"column":11,"nodeType":"49","endLine":101,"endColumn":79},{"ruleId":"50","severity":1,"message":"51","line":101,"column":11,"nodeType":"49","endLine":101,"endColumn":79},{"ruleId":"52","severity":1,"message":"53","line":30,"column":6,"nodeType":"54","endLine":30,"endColumn":10,"suggestions":"55"},{"ruleId":"47","severity":1,"message":"48","line":111,"column":17,"nodeType":"49","endLine":114,"endColumn":19},{"ruleId":"50","severity":1,"message":"51","line":111,"column":17,"nodeType":"49","endLine":114,"endColumn":19},{"ruleId":"47","severity":1,"message":"48","line":43,"column":19,"nodeType":"49","endLine":47,"endColumn":23},{"ruleId":"47","severity":1,"message":"48","line":62,"column":15,"nodeType":"49","endLine":66,"endColumn":17},{"ruleId":"47","severity":1,"message":"48","line":48,"column":17,"nodeType":"49","endLine":51,"endColumn":19},{"ruleId":"50","severity":1,"message":"51","line":48,"column":17,"nodeType":"49","endLine":51,"endColumn":19},{"ruleId":"47","severity":1,"message":"48","line":59,"column":15,"nodeType":"49","endLine":63,"endColumn":17},"@next/next/no-img-element","Do not use <img>. Use Image from 'next/image' instead. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchPost'. Either include it or remove the dependency array.","ArrayExpression",["56"],{"desc":"57","fix":"58"},"Update the dependencies array to be: [fetchPost, id]",{"range":"59","text":"60"},[827,831],"[fetchPost, id]"]